package App::Route53;

use strict;
use warnings;

use Carp;
use File::Temp qw(tempfile);
use JSON;

use Role::Tiny::With;
with 'App::AWS';

use parent 'App::Command';

__PACKAGE__->follow_best_practice;

__PACKAGE__->mk_accessors(
  qw(
    elb
    hosted_zone_id
    change_batch
    region
    profile
  )
);

########################################################################
sub get_hosted_zone {
########################################################################
  my ( $self, $zone_id ) = @_;

  $zone_id //= $self->get_hosted_zone_id;

  return $self->command( 'get-hosted-zone' => [ '--id' => $self->get_hosted_zone_id, ] );
}

########################################################################
sub create_alias {
########################################################################
  my ( $self, %args ) = @_;

  my ( $elb, $zone_id, $domain, $alb_arn ) = @args{qw(elb zone_id domain alb_arn)};
  $elb     //= $self->get_elb;
  $zone_id //= $self->get_hosted_zone_id;

  croak "alb_arn is a require argument\n"
    if !$alb_arn;

  croak "zone_id is a required argument\n"
    if !$zone_id;

  croak "domain is a required argument\n"
    if !$domain;

  my $alb          = $elb->describe_load_balancer( $alb_arn, 'LoadBalancers[0]' );
  my $alb_dns_name = $alb->{DNSname};
  my $alb_zone_id  = $alb->{CanonicalHostedZoneId};

  my $change_batch = {
    Changes => [
      Action            => 'UPSERT',
      ResourceRecordSet => {
        Name        => $domain,
        Type        => 'A',
        AliasTarget => {
          HostedZoneId         => $alb_zone_id,
          DNSName              => $alb_dns_name,
          EvaluateTargetHealth => 'false',
        }
      }
    ]
  };

  return $self->change_resource_record_sets( $zone_id, $change_batch );
}

########################################################################
sub change_resource_record_sets {
########################################################################
  my ( $self, $zone_id, $change_batch ) = @_;

  $zone_id //= $self->get_hosted_zone_id;

  $change_batch //= $self->get_change_batch;

  croak "usage: change_resource_record_sets(zone-id, change-batch)\n"
    if !$zone_id || !$change_batch;

  my ( $fh, $filename ) = tempfile( 'rrs-change-XXXXXX', UNLINK => 1, SUFFIX => '.json' );

  print {$fh} encode_json( { Changes => $change_batch } );

  close $fh;

  return $self->command(
    'change-resource-record-sets' => [
      '--hosted-zone-id' => $zone_id,
      '--change-batch'   => "file://$filename",
    ]
  );
}

########################################################################
sub validate_hosted_zone {
########################################################################
  my ( $self, %args)= @_;

  my ( $zone_id, $domain, $alb_type ) = @args{qw(zone_id domain alb_type)};

  my $query = sprintf 'HostedZones[?Id == `/hostedzone/%s`]', $zone_id;

  my ($zone) = @{ $self->command( 'list-hosted-zones' => [ '--query' => $query ] ) || [] };

  croak sprintf "invalid zone_id: [%s]\n", $zone_id
    if !$zone;

  my $zone_name = $zone->{Name};

  my $zone_type = $zone->{Config}->{PrivateZone} ? 'private' : 'public';

  $zone_name =~ s/[.]$//xsm;

  croak sprintf "your domain [%s] cannot be configured in [%s]'s zone (%s)\n", $domain, $zone_name, $zone_id
    if $domain !~ /$zone_name/xsm;

  croak sprintf "your ALB type [%s] is not compatible with the hosted zone %s (%s)\n", $alb_type, $zone_id,
    $zone_type
    if $zone_type ne $alb_type;

  return $zone;
}

1;
