package App::FargateStack::Constants;

use strict;
use warnings;

use Data::Dumper;
use English qw(no_match_vars);

use parent qw(Exporter);

use Readonly;

Readonly::Scalar our $TRUE  => 1;
Readonly::Scalar our $FALSE => 0;

Readonly::Scalar our $EMPTY => q{};
Readonly::Scalar our $SPACE => q{ };
Readonly::Scalar our $DASH  => q{-};

Readonly::Scalar our $DEFAULT_CPU_SIZE           => 256;
Readonly::Scalar our $DEFAULT_MEMORY_SIZE        => 512;
Readonly::Scalar our $DEFAULT_PORT               => 80;
Readonly::Scalar our $DEFAULT_RULE_ID            => '1';
Readonly::Scalar our $DEFAULT_LOG_RETENTION_DAYS => 14;
Readonly::Scalar our $DEFAULT_ECS_POLL_TIME      => 5;
Readonly::Scalar our $DEFAULT_LOG_POLL_TIME      => 5;
Readonly::Scalar our $DEFAULT_ECS_POLL_LIMIT     => 5 * 60 * 60;  # 5m
Readonly::Scalar our $ACM_REQUEST_SLEEP_TIME     => 5;
Readonly::Scalar our $IAM_POLICY_VERSION         => '2012-10-17';

Readonly::Scalar our $EFS_ARN_TEMPLATE             => 'arn:aws:elasticfilesystem:%s:%s:file-system/%s';
Readonly::Scalar our $TASK_DEFINITION_ARN_TEMPLATE => 'arn:aws:ecs:%s:%s:task-definition/%s:*';
Readonly::Scalar our $CLUSTER_ARN_TEMPLATE         => 'arn:aws:ecs:%s:%s:cluster/%s';
Readonly::Scalar our $ROLE_ARN_TEMPLATE            => 'arn:aws:iam::%s:role/%s';
Readonly::Scalar our $QUEUE_ARN_TEMPLATE           => 'arn:aws:sqs:%s:%s:%s';
Readonly::Scalar our $S3_BUCKET_ARN_TEMPLATE       => 'arn:aws:s3:::%s';
Readonly::Scalar our $ECR_ARN_TEMPLATE             => 'arn:aws:ecr:%s:%s:repository/%s';

Readonly::Scalar our $DEFAULT_HEALTH_CHECK_INTERVAL            => 30;
Readonly::Scalar our $DEFAULT_HEALTH_CHECK_TIMEOUT             => 5;
Readonly::Scalar our $DEFAULT_HEALTH_HEALTHY_CHECK_THRESHOLD   => 5;
Readonly::Scalar our $DEFAULT_HEALTH_UNHEALTHY_CHECK_THRESHOLD => 2;

Readonly::Scalar our $CLOUDWATCH_LOGS_RETENTION_DAYS =>
  [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653, ];

Readonly::Scalar our $SEC_PER_MIN  => 60;
Readonly::Scalar our $SEC_PER_HOUR => 60 * $SEC_PER_MIN;
Readonly::Scalar our $SEC_PER_DAY  => 24 * $SEC_PER_HOUR;

Readonly::Scalar our $EVENT_SCHEDULER_TYPE_URL =>
  'https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html';

Readonly::Hash our %AWS_SERVICE_DOMAINS => (
  events => 'events.amazonaws.com',
  task   => 'ecs-tasks.amazonaws.com',
);

Readonly::Hash our %HELP_SUBJECTS => (
  'tbd' => [
    'TBD' => << 'END_OF_TEXT'
Our current TODO list. Add your request at
https://github.com/rlauer6/App-Fargate
END_OF_TEXT
  ],
  'overview' => [
    'OVERVIEW' => <<'END_OF_TEXT'
An overview of the App::FargateStack framework.
END_OF_TEXT
  ],
  'daemon services' => [
    'DAEMON SERVICES' => <<'END_OF_TEXT'
Information on how to create long running daemon services using this
framework.
END_OF_TEXT
  ],
  'scheduled jobs' => [
    'SCHEDULED JOBS' => <<'END_OF_TEXT'
A description of using the framework to create scheduled and one-shot workloads.
END_OF_TEXT
  ],

  'http services' => [
    'HTTP SERVICES' => <<'END_OF_TEXT'
A description of how the framework can provision a fully functional
web application using Fargate.
END_OF_TEXT
  ],

  'log groups' => [
    'CLOUDWATCH LOG GROUPS' => <<'END_OF_TEXT'
Information on how log groups are provisioned and configure.
END_OF_TEXT
  ],
  'iam permissions' => [
    'IAM PERMISSIONS' => <<'END_OF_TEXT'
A discussion of how the framework creates IAM roles and policies for
the resources used in your tasks.
END_OF_TEXT
  ],
  'environment variables' => [
    'ENVIRONMENT VARIABLES' => <<'END_OF_TEXT'
How to injecting environment variables into your container. Also
include information on using secrets fromSecretsManager in your
environment.
END_OF_TEXT
  ],
  'queues' => [
    'SQS QUEUES' => <<'END_OF_TEXT'
How to create and configure SQS queues for your application.
END_OF_TEXT
  ],
  'efs support' => [
    'FILESYSTEM SUPPORT' => <<'END_OF_TEXT'
Configuring support for EFS files systems inside your container.
END_OF_TEXT
  ],
  'filesystem support' => 'efs support',
  'queues'             => [
    'S3 BUCKETS' => <<'END_OF_TEXT'
Creating and configuring S3 buckets.
END_OF_TEXT
  ],
  'networking' => [
    'NETWORKING' => <<'END_OF_TEXT'
Explanation of how the framework recognizes and uses your networking
resources.
END_OF_TEXT
  ],
  'security groups' => [
    'SECURITY GROUPS' => <<'END_OF_TEXT'
How the framework provisions and configures security groups.
END_OF_TEXT
  ],
);

Readonly::Scalar our $LOG4PERL_CONF => <<'END_OF_CONF';
log4perl.logger = INFO, Screen
log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
log4perl.appender.Screen.stderr = 1
log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %p %m%n
log4perl.appender.Screen.color.DEBUG=magenta
log4perl.appender.Screen.color.INFO=green
log4perl.appender.Screen.color.WARN=yellow
log4perl.appender.Screen.color.ERROR=red
log4perl.appender.Screen.color.FATAL=bold red
log4perl.appender.Screen.color.TRACE=bold white
END_OF_CONF

our @EXPORT = (
  qw(
    $ACM_REQUEST_SLEEP_TIME
    %AWS_SERVICE_DOMAINS
    $CLOUDWATCH_LOGS_RETENTION_DAYS
    $DASH
    $DEFAULT_CPU_SIZE
    $DEFAULT_LOG_RETENTION_DAYS
    $DEFAULT_LOG_POLL_TIME
    $DEFAULT_ECS_POLL_TIME
    $DEFAULT_ECS_POLL_LIMIT
    $DEFAULT_MEMORY_SIZE
    $DEFAULT_PORT
    $DEFAULT_RULE_ID
    $EMPTY
    $EVENT_SCHEDULER_TYPE_URL
    $FALSE
    $IAM_POLICY_VERSION
    $LOG4PERL_CONF
    $SPACE
    $TRUE
    %HELP_SUBJECTS
  ),
  qw(
    $DEFAULT_HEALTH_CHECK_INTERVAL
    $DEFAULT_HEALTH_CHECK_TIMEOUT
    $DEFAULT_HEALTH_HEALTHY_CHECK_THRESHOLD
    $DEFAULT_HEALTH_UNHEALTHY_CHECK_THRESHOLD
  ),
  qw(
    $SEC_PER_DAY
    $SEC_PER_HOUR
    $SEC_PER_MIN
  ),
  qw(
    $CLUSTER_ARN_TEMPLATE
    $ECR_ARN_TEMPLATE
    $EFS_ARN_TEMPLATE
    $QUEUE_ARN_TEMPLATE
    $ROLE_ARN_TEMPLATE
    $S3_BUCKET_ARN_TEMPLATE
    $TASK_DEFINITION_ARN_TEMPLATE
  )
);

1;
