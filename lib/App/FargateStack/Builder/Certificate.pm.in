package App::FargateStack::Builder::Certificate;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);

use App::FargateStack::Constants;

use Role::Tiny;

########################################################################
sub build_certificate {
########################################################################
  my ( $self, $task_name ) = @_;

  my ( $config, $dryrun, $tasks ) = $self->common_args(qw(config dryrun tasks));

  my $domain = $config->{domain};

  my $acm = $self->fetch_acm( domain => $domain );

  my $cert = $self->certificate_exists(
    acm       => $acm,
    tasks     => $tasks,
    task_name => $task_name,
    domain    => $domain
  );

  if ($cert) {
    my $status = $cert->{Status};

    $self->log_info( 'certificate: [%s] certificate exists, status: [%s]...skipping', $domain, $status );

    $self->inc_existing_resources( certificate => $cert->{CertificateArn} );

    return;
  }

  $self->log_warn( 'certificate: certificate for [%s] will be created...%s', $domain, $dryrun );

  $self->inc_required_resources(
    certificate => sub {
      return $self->get_config->{certficate_arn} // 'arn:???';
    }
  );

  return
    if $dryrun;

  my $arn = $acm->request_certificate();
  $acm->check_result( message => 'ERROR: could not create certifcate for: [%s]', $domain );

  sleep $ACM_REQUEST_SLEEP_TIME;

  my $dns_record = $acm->describe_certificate( $arn, 'Certificate.DomainValidationOptions[0].ResourceRecord' );

  log_die( $self, 'ERROR: no DNS record found yet for %s', $arn )
    if !$dns_record;

  my ( $name, $type, $value ) = @{$dns_record}{qw(Name Type Value)};

  my $change_batch = {
    ChangeBatch => {
      Changes => [
        { Action            => 'UPSERT',
          ResourceRecordSet => {
            Name            => $name,
            Type            => $type,
            TTL             => 300,
            ResourceRecords => [ { Value => $value } ]
          }
        }
      ]
    }
  };

  my $route53 = $self->fetch_route53();

  $route53->set_change_batch($change_batch);

  $route53->change_resource_record_sets;

  $route53->check_result( message => 'ERROR: could not insert DNS record' );

  $tasks->{$task_name}->{certificate_arn} = $arn;

  return;
}

########################################################################
sub certificate_exists {
########################################################################
  my ( $self, %args ) = @_;

  my ( $acm, $task_name, $domain, $tasks ) = @args{qw(acm task_name domain tasks)};

  $acm    //= $self->fetch_acm;
  $tasks  //= $self->get_config->{tasks};
  $domain //= $self->get_config->{domain} // $tasks->{$task_name}->{domain};

  my @all_certs = @{ $acm->list_certificates };

  my ($cert) = grep { $domain eq $_->{DomainName} } @all_certs;

  return
    if !$cert;

  $tasks->{$task_name}->{certificate_arn} = $cert->{CertificateArn};

  return $cert;
}

1;
