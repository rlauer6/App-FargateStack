package App::FargateStack::Builder::Events;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);

use App::FargateStack::Constants;

use Role::Tiny;

########################################################################
sub build_events {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $tasks = $config->{tasks};

  my @events = grep { $tasks->{$_}->{type} eq 'task' } keys %{$tasks};

  return
    if !@events;

  $self->build_events_iam_role(@events);  # task names

  foreach my $task_name (@events) {
    my $task = $tasks->{$task_name};

    # ok to be undef, as App::Events will provide default
    my $event_bus_name = $task->{event_bus_name};

    my $event = $self->fetch_events;

    my $schedule = $task->{schedule};

    croak sprintf "no schedule for event [%s]\n", $task_name
      if !$schedule;

    my $valid_schedule = $event->validate_schedule($schedule);

    croak sprintf "ERROR: invalid schedule expression: %s\nSee: %s", $schedule, $EVENT_SCHEDULER_TYPE_URL
      if !$valid_schedule;

    my $rule_name = sprintf '%s-schedule', $task_name;

    if ( $valid_schedule ne $schedule ) {
      $self->log_warn( sprintf 'events: [%s] schedule modified [%s]', $schedule, $valid_schedule );

      $task->{schedule} = $valid_schedule;
      $schedule = $valid_schedule;
    }

    my $exists = $event->rule_exists( $rule_name, $schedule );
    $self->log_info( 'events: checking if rule [%s] exists or schedule [%s] changed', $rule_name, $schedule );
    my $rule_exists      = $exists == 1  ? q{}  : 'does not ';
    my $schedule_changed = $exists == -1 ? q {} : 'not ';

    $self->log_info( 'events: rule [%s] %sexists and schedule [%s] has %schanged',
      $rule_name, $rule_exists, $schedule, $schedule_changed );

    if ( ( !$dryrun && $exists == -1 ) || $self->taskdef_has_changed($task_name) ) {
      # in the off chance the rule does not exist, but the taskdef has
      # changed we still should not have an issue here since our
      # $event object will not croak on an error...
      $self->log_warn( 'events: attempting to deleting rule [%s]...', $rule_name );
      $event->delete_rule($rule_name);
    }

    if ( !$exists || ( $exists == -1 || $self->taskdef_has_changed($task_name) ) ) {
      my $action = !$exists ? 'created' : 'replaced';

      $self->inc_required_resources( 'events:rule' => [$rule_name] );
      $self->get_logger->warn( sprintf 'events: [%s] rule will be %s...%s', $rule_name, $action, $dryrun );

      if ( !$dryrun ) {

        $self->get_logger->warn( sprintf 'events: [%s] rule will be %s...%s', $rule_name, $action, $dryrun );
        my $result = $event->put_rule( $rule_name, $schedule );

        log_die( $self, sprintf "ERROR: could not create rule [%s]\n%s", $rule_name, $event->get_error )
          if !$result;

        $self->get_logger->warn( sprintf 'events: [%s] rule %s successfully', $rule_name, $action );
      }
    }
    else {
      $self->get_logger->info( sprintf 'events: rule [%s] exists...skipping', $rule_name );
      $self->inc_existing_resources( 'events:rule' => $rule_name );
    }

    $self->create_event_target($task_name);
  }

  return;
}

########################################################################
sub create_event_target {
########################################################################
  my ( $self, $task_name ) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $region = $self->get_region;

  my $account = $self->get_account;

  my $task = $config->{tasks}->{$task_name};

  my $events_role = $config->{events_role};

  my $task_definition_arn = $task->{arn};

  my $subnets = $self->get_subnets->{private} // $self->get_subnets->{public};

  my $security_group = $config->{security_groups}->{fargate}->{group_id};

  my $target = [
    { Id            => $DEFAULT_RULE_ID,
      Arn           => $config->{cluster}->{arn},
      RoleArn       => $events_role->{arn},
      EcsParameters => {
        TaskDefinitionArn    => $task_definition_arn,
        LaunchType           => 'FARGATE',
        NetworkConfiguration => {
          awsvpcConfiguration => {
            Subnets        => [ $subnets->[0] ],
            SecurityGroups => [$security_group],
            AssignPublicIp => 'DISABLED'
          }
        }
      }
    }
  ];

  my $rule_name = sprintf '%s-schedule', $task_name;

  my $event = $self->fetch_events;

  my $current_target = $event->target_exists($rule_name);

  $self->log_trace(
    sub {
      return Dumper(
        [ current_target      => $current_target,
          task_definition_arn => $task_definition_arn
        ]
      );
    }
  );

  my $ecs_parameters = $current_target->{EcsParameters} // {};

  my $current_task_definition_arn = $ecs_parameters->{TaskDefinitionArn} // $EMPTY;

  if ( $current_task_definition_arn eq $task_definition_arn ) {
    $self->log_info( sprintf 'events: [%s] target exists...skipping', $task_name );
    $self->inc_existing_resources( 'events:target' => [$task_name] );

    return;
  }

  $self->log_warn( sprintf 'events: [%s] ARNs differ [%s] <=> [%s]',
    $task_name, $current_task_definition_arn, $task_definition_arn );

  my $action = $current_target ? 'replaced' : 'created';

  $self->log_warn( sprintf 'events: target [%s] will be %s...%s', $task_name, $action, $dryrun );

  $self->inc_required_resources( 'events:target' => [$task_name] );

  return
    if $dryrun;

  if ($current_target) {
    $self->log_warn( 'events: deleting target for rule [%s]...', $rule_name );
    $event->remove_targets( $rule_name, $DEFAULT_RULE_ID );
  }

  $self->log_warn( 'events: creating target for rule [%s]...', $rule_name );

  my $result = $event->put_targets( $rule_name, $target );

  log_die( $self, "ERROR: could not create target [%s] for rule [%s]\n%s",
    $rule_name, $target, $event->get_error )
    if !$result;

  return;
}

########################################################################
sub build_events_iam_role {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $iam = $self->fetch_iam;

  my $default_name = $self->normalize_name( $config->{app}->{name} );

  my $role_name = $self->create_events_role($default_name);

  my $policy_name = $config->{events_role}->{policy_name};

  my $policy;

  if ( !$policy_name || !$self->get_cache ) {
    $policy_name = sprintf 'Events%sPolicy', $default_name;
    $policy      = $iam->get_role_policy( $role_name, $policy_name );
  }
  elsif ( $self->get_cache ) {
    $policy = $EMPTY;
  }

  if ( $policy || $self->get_cache ) {
    $config->{events_role}->{policy_name} = $policy_name;

    $self->log_info( 'iam:role-policy: policy [%s] for [%s] exists...%s',
      $policy_name, $role_name, $self->get_cache || 'skipping' );

    $self->inc_existing_resources( 'iam:role-policy' => [$policy_name] );
    return;
  }

  my @statement;

  my $role_policy = {
    Version   => $IAM_POLICY_VERSION,
    Statement => \@statement,
  };

  push @statement, $self->add_events_policy();

  $self->log_warn( 'iam:role-policy: policy [%s] will be created for [%s]...%s',
    $policy_name, $role_name, $dryrun );

  $self->inc_required_resources( 'iam:policy' => [$policy_name] );

  return
    if $dryrun;

  $iam->put_role_policy( $role_name, $policy_name, $role_policy );
  log_die( $self, "ERROR: could not create policy [%s] for [%s]\n%s",
    $role_name, $policy_name, $iam->get_error )
    if $iam->get_error;

  $self->log_warn( 'iam:role-policy: policy [%s] created successfully for [%s]...', $policy_name, $role_name );

  $config->{events_role}->{policy_name} = $policy_name;

  return;
}

########################################################################
sub create_events_role { return shift->create_role( @_, 'events' ); }
########################################################################

########################################################################
sub add_events_policy {
########################################################################
  my ($self) = @_;

  my @events = $self->has_events;

  my $region       = $self->get_region;
  my $account      = $self->get_account;
  my $cluster_name = $self->get_config->{cluster}->{name};

  my $role_arn = $self->get_config->{role}->{arn};

  my @policy_statement = (
    { Effect    => 'Allow',
      Action    => 'ecs:RunTask',
      Resource  => [ map { sprintf $TASK_DEFINITION_ARN_TEMPLATE, $region, $account, $_ } @events ],
      Condition => {
        ArnLike => {
          'ecs:cluster' => sprintf $CLUSTER_ARN_TEMPLATE,
          $region, $account, $cluster_name,
        }
      }
    },
    { Effect   => 'Allow',
      Action   => 'iam:PassRole',
      Resource => [$role_arn],
    }
  );

  return @policy_statement;
}

########################################################################
sub has_events {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;
  my $tasks  = $config->{tasks};

  return grep { $tasks->{$_}->{type} eq 'task' } keys %{$tasks};
}

########################################################################
sub fetch_events {
########################################################################
  my ($self) = @_;

  require App::Events;

  my $events = $self->get_events;

  return $events
    if $events;

  $events = App::Events->new( $self->get_global_options );

  $self->set_events($events);

  return $events;
}

1;
