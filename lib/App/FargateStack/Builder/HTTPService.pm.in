package App::FargateStack::Builder::HTTPService;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use List::Util qw(none any);
use JSON;

use App::FargateStack::Constants;
use App::FargateStack::Builder::Utils qw(log_die);

use Role::Tiny;

########################################################################
sub build_http_service {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  $self->create_alb();

  $self->benchmark('http-service:create-alb');

  my $fargate_sg = $config->{security_groups}->{fargate}->{group_id} // 'sg-???';
  my $alb_sg     = $config->{security_groups}->{alb}->{group_id}     // 'sg-???';

  my $ec2 = $self->get_ec2;

  if ( $ec2->is_sg_authorized( $fargate_sg, $alb_sg ) ) {
    $self->log_info(
      q{http-service:security-group-ingress: ALB's security group: [%s] already authorized...skipping},
      $alb_sg );
  }
  else {
    $self->log_warn(
      q{http-service:security-group-ingress: ALB's security group: [%s] will be authorized to Fargate's: [%s]...%s},
      $alb_sg, $fargate_sg, $dryrun );
  }

  if ( !$dryrun ) {
    $ec2->authorize_security_group_ingress( group_id => $fargate_sg, source_group => $alb_sg );
  }

  $self->create_target_group();
  $self->benchmark('http-service:create-target-group');

  $self->create_listeners();
  $self->benchmark('http-service:create-listeners');

  if ( $self->is_https ) {
    $self->attach_certificate();
  }

  return $TRUE;
}

########################################################################
sub attach_certificate {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $domain = $config->{domain};

  my $alb_arn = $config->{alb}->{arn};

  my $elb = $self->get_elb;

  if ( !$alb_arn || $alb_arn =~ /[?]{3}/xsm ) {
    $self->log_warn('http-service: no ALB created yet, cannot attach certificate');
    return;
  }

  my $listener = $elb->describe_listeners( $alb_arn, 'Listeners[?Port == `443`]' );
  log_die( $self, 'ERROR: could not find a 443 listener for ALB: [%s]', $alb_arn )
    if !$listener || !@{$listener};

  my $listener_arn = $listener->[0]->{ListenerArn};

  my $certificates = $elb->list_certificates($listener_arn);

  log_die( $self, 'ERROR: could not list certificates for ALB: [%s]', $alb_arn )
    if !$certificates;

  $self->log_trace( sub { return Dumper( [ certificates => $certificates ] ); } );

  my $certificate_arn = $config->{certificate_arn};

  log_die( $self, 'ERROR: no certificate ARN' )
    if !$certificate_arn;

  if ( any { $_ eq $certificate_arn } @{$certificates} ) {
    $self->log_info( 'http-service: certificate for [%s] already attached to listener...skipping', $domain );
    return;
  }

  $self->log_warn( 'http-service: certificate for [%s] will be added to listener...%s', $domain, $dryrun );

  return
    if $dryrun;

  my $result = $elb->add_listener_certificate( $listener_arn, $certificate_arn );

  log_die( $self, "ERROR: could not add certificate [%s] to ALB [%s]\n%s",
    $certificate_arn, $alb_arn, $elb->get_error )
    if !$result;

  $self->log_warn( 'http-service: successfully added certificate for [%s] to ALB', $domain );

  return;
}

########################################################################
sub fetch_listeners_by_port {
########################################################################
  my ( $self, $alb_arn ) = @_;

  my $elb = $self->get_elb;

  my $listeners = $elb->describe_listeners( $alb_arn, q{Listeners} );

  return $listeners ? map { ( $_->{Port} => $_ ) } @{$listeners} : ();
}

########################################################################
sub create_listeners {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $elb = $self->get_elb;

  my ( $alb_arn, $alb_type, $alb_port, $alb_redirect ) = @{ $config->{alb} }{qw(arn type port redirect_80)};

  if ( !defined $alb_redirect && $self->is_https ) {
    $config->{arn}->{redirect_80} = $alb_redirect = $TRUE;
  }

  if ( !$alb_arn ) {
    $self->log_info( 'http-service: deferring listener creation, no ALB yet...%s', $dryrun );
    return;
  }

  my $service = $config->{tasks}->{ $self->get_http };

  my $target_group_arn = $service->{target_group_arn};

  my %listeners_by_port = $self->fetch_listeners_by_port($alb_arn);

  my %default_actions = ( $alb_port => [ { Type => 'forward', 'TargetGroupArn' => $target_group_arn } ] );

  if ( $self->is_https && $alb_redirect ) {
    $default_actions{80} = [
      { Type           => 'redirect',
        RedirectConfig => {
          Protocol   => 'HTTPS',
          Port       => $alb_port,
          StatusCode => 'HTTP_301'
        }
      }
    ];
  }

  my $domain = $config->{domain};
  my @ports  = keys %default_actions;

  my $needs_cert = $self->has_https_service;

  foreach my $port (@ports) {
    $default_actions{$port} = encode_json( $default_actions{$port} );

    # create listener returns listener configuration (uses --query)
    if ( !$listeners_by_port{$port} ) {
      $self->log_warn( 'http-service: listener for port [%s] will be created...%s', $port, $dryrun );

      $self->inc_resource_required(
        listeners => [
          sub {
            my ($dryrun) = @_;

            return $dryrun ? 'arn:???' : $self->get_listener_by_port( $alb_arn, $port );
          }
        ]
      );

      if ( !$dryrun ) {
        $listeners_by_port{$port} = $elb->create_listener(
          alb_arn         => $alb_arn,
          port            => $port,
          default_actions => $default_actions{$port},
          query           => 'Listeners',
          $needs_cert ? ( certificate_arn => $config->{certificate_arn} ) : (),
        );
      }
    }
    else {
      $self->log_info( 'http-service: listener for port [%s] exists...skipping', $port );
      $self->inc_existing_resources( listeners => [ $listeners_by_port{$port}->{ListenerArn} ] );

      # add certificate...https
      if ( $needs_cert && !$dryrun ) {
        $elb->add_listener_certificate( $listeners_by_port{$port}->{ListenerArn}, $config->{certificate_arn} );
      }
    }
  }

  foreach my $port (@ports) {

    my $listener = $listeners_by_port{$port};

    my $rules = $elb->fetch_rules_by_domain( $domain, $listener->{ListenerArn} );

    $self->log_trace( sub { return Dumper( [ rules => $rules ] ); } );

    if ( $rules && @{$rules} ) {
      $self->log_info( 'http-service: listener rule for port: [%s] exists...skipping', $port );
      $self->inc_existing_resources( listener_rules => [ map { $_->{RuleArn} } @{$rules} ] );
      next;
    }

    $rules = $elb->describe_rules( $listener->{ListenerArn}, 'Rules' );

    # find next priority
    my @priorities
      = sort { $a <=> $b } map { $_->{Priority} } grep { $_->{Priority} =~ /^\d+$/xsm } @{$rules};

    my $priority = @priorities ? $priorities[-1] + 1 : 100;

    $self->log_warn( 'http-service: listener rule for [%s] on port: [%s] will be created...%s',
      $domain, $port, $dryrun );

    $self->inc_required_resources(
      listener_rules => [
        sub {
          my ($dryrun) = @_;

          return 'arn:???'
            if $dryrun;

          my $rules = $elb->fetch_rule_arns_by_domain( $domain, $listener->{ListenerArn} );

          return q{}
            if !$rules;

          return join q{, }, @{$rules};
        }
      ]
    );

    if ( !$dryrun ) {
      my $conditions = "Field=host-header,Values=$domain";

      $elb->create_rule(
        listener_arn   => $listener->{ListenerArn},
        priority       => $priority,
        conditions     => $conditions,
        default_action => $default_actions{$port}
      );
    }
  }

  return;
}

########################################################################
sub create_target_group {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $elb = $self->get_elb;

  # we would not be here unless we have an HTTP service
  my $task = $config->{tasks}->{ $self->get_http };

  my $target_group_name = $task->{target_group_name};

  if ( !$target_group_name ) {
    $target_group_name = sprintf '%s-tg', $config->{app}->{name};

    $task->{target_group_name} = $target_group_name;
  }

  if ( my $target_group = $elb->target_group_exists($target_group_name) ) {
    $self->log_info( 'http-service: target group [%s] exists...skipping', $target_group_name );

    $task->{target_group_arn} = $target_group->{TargetGroupArn};

    $self->inc_existing_resources( target_group => $task->{target_group_arn} );
  }
  else {
    $self->log_warn( 'http-service: target group [%s] will be created...%s', $target_group_name, $dryrun );

    $self->inc_required_resources(
      target_group => sub {
        my ($dryrun) = @_;
        return $dryrun ? "arn:???/$target_group_name" : $task->{target_group_arn};
      }
    );

    my $health_check = $task->{health_check} // {};

    if ( !defined $task->{health_check} || $health_check->{enabled} ) {
      $health_check->{enabled} //= $JSON::true;
      $health_check->{port}    //= $task->{port};
      $health_check->{path}    //= q{/};

      $health_check->{interval_seconds} //= $DEFAULT_HEALTH_CHECK_INTERVAL;
      $health_check->{timeout_seconds}  //= $DEFAULT_HEALTH_CHECK_TIMEOUT;
      $health_check->{healthy_threshold_count}   = $DEFAULT_HEALTH_HEALTHY_CHECK_THRESHOLD;
      $health_check->{unhealthy_threshold_count} = $DEFAULT_HEALTH_UNHEALTHY_CHECK_THRESHOLD;

      $health_check->{matcher} = '200';
    }
    else {
      log_die( $self, 'ERROR: health checks must be enabled' );
    }

    $task->{health_check} = $health_check;

    $self->log_debug( sub { return Dumper( [ health_check => $health_check ] ); } );

    if ( !$dryrun ) {

      $task->{target_group_arn} = $elb->create_target_group(
        name         => $target_group_name,
        health_check => $health_check,
      );

      log_die( $self, "ERROR: could not create target group:[%s]\n%s", $target_group_name, $elb->get_error )
        if !$task->{target_group_arn};

      $self->log_info( "\tarn: %s", $task->{target_group_arn} );
    }
  }

  return;
}

########################################################################
sub is_https { goto &has_https_service; }
########################################################################
sub has_https_service {
########################################################################
  my ($self) = @_;

  my $services = $self->get_config->{tasks};

  my $http_service = $self->get_http;

  return
    if !$http_service;

  return $services->{$http_service}->{type} eq 'https';
}

########################################################################
sub create_alb {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $elb = $self->get_elb();

  # if we have defined on in the config, verify
  if ( $config->{alb}->{arn} ) {
    my $alb = $elb->describe_load_balancer( $config->{alb}->{arn} );

    log_die(
      $self,
      "ERROR: could not describe load balancer: [%s]\n%s",
      $config->{alb}->{arn},
      $elb->get_error
    ) if !$alb;

    $alb = $alb->{LoadBalancers}->[0];
    $self->set_alb($alb);

    $self->log_trace( sub { return Dumper( [ alb => $alb ] ); } );

    $self->log_info( 'http-service: load balancer [%s] defined in config and verified...skipping',
      $alb->{LoadBalancerName} );

    $self->inc_existing_resources( alb => $alb->{LoadBalancerArn} );

    my $security_groups = $alb->{SecurityGroups};

    my $alb_sg = $config->{security_groups}->{alb}->{group_id};

    if ( !$alb_sg ) {
      $self->log_info('http-service: no ALB security group in configuration...looking...');

      # find the security group that allows 443 ingress
      my $ec2 = $self->get_ec2;

      my $query = 'SecurityGroupRules[?IsEgress == `false` && ToPort == `443`]';

      foreach my $group_id ( @{$security_groups} ) {
        my $sg = $ec2->describe_security_group_rules( $group_id, $query );

        next if !@{$sg};

        $alb_sg = $sg->[0]->{GroupId};  # or $group_id
        last;
      }

      if ($alb_sg) {
        $self->log_warn( 'http-service: found a security group for ALB [%s] with 443 ingress, using [%s]',
          $alb->{LoadBalancerName}, $alb_sg );
      }
    }

    if ( !$alb_sg ) {
      $alb_sg = $security_groups->[0];
      $self->log_warn(
        'http-service: could not find a security group for ALB [%s] with 443 ingress, using [%s]',
        $alb->{LoadBalancerName}, $alb_sg );
    }

    $config->{security_groups}->{alb}->{group_id} = $alb_sg;

    $config->{security_groups}->{alb}->{name} = $self->get_ec2->find_security_group_name($alb_sg);

    $self->inc_existing_resources( security_groups => [$alb_sg] );

    return;
  }

  # --create-alb forces creation of a new ALB
  if ( !$self->get_create_alb ) {
    my $alb_type = $config->{alb}->{type};

    $self->log_warn( 'http-service: WARNING - no ALB ARN defined in configuration...looking for %s ALB',
      $alb_type );

    my ( $alb_arn, $security_group_id ) = eval { return $elb->find_alb($alb_type); };

    $self->log_trace(
      sub {
        return Dumper(
          [ alb_arn        => $alb_arn,
            security_group => $security_group_id
          ]
        );
      }
    );

    my $security_group_name = $self->get_ec2->find_security_group_name($security_group_id);

    if ( $alb_arn
      && $elb->validate_alb( arn => $alb_arn, scheme => $self->is_https ? 'internet-facing' : 'internal' ) ) {
      # set this for later
      $self->set_alb( $elb->get_alb );

      $self->log_info( "\tarn: %s", $alb_arn );

      $config->{security_groups}->{alb}->{group_id} = $security_group_id;

      $config->{alb}->{arn} = $alb_arn;

      $config->{alb}->{name} = $self->get_alb->{LoadBalancerName};
      $self->inc_existing_resources( alb => $config->{alb}->{name} );

      # me may still need to attach fargate's security group to this ALB
      # check to see if fargate's security group is already attached

      my $query = sprintf 'LoadBalancers[?LoadBalancerArn == `%s`]|[0].SecurityGroups', $alb_arn;

      my $alb_security_groups = $elb->describe_load_balancers($query);

      my $fargate_sg = $config->{security_groups}->{fargate}->{group_id} // 'not-provisioned-yet';

      if ( none { $_ eq $fargate_sg } @{$alb_security_groups} ) {
        $self->log_warn( 'http-service: will add security group %s to load balancer...%s',
          $fargate_sg, $dryrun );

        if ( !$dryrun ) {
          $elb->set_security_groups( $alb_arn, @{$alb_security_groups}, $fargate_sg );
        }
      }
      else {
        $self->log_info( 'http-service: security group %s already attached...skipping', $fargate_sg );
      }

      return;
    }
  }

  # create an alb
  $self->log_warn( 'http-service: no ALB defined and no usable ALB found...will be created...%s', $dryrun );

  my $alb_sg = $self->create_alb_security_group;

  my $subnets = [ @{ $self->get_subnets->{Private} }[ ( 0, 1 ) ] ];

  my $alb_name = $config->{alb}->{name} // $config->{app}->{name} . '-alb';

  $self->inc_required_resources(
    alb => sub {
      my ($dryrun) = @_;
      return $dryrun ? "arn:???/$alb_name" : $config->{alb}->{arn};
    }
  );

  if ( !$dryrun ) {
    my $alb = $elb->create_load_balancer(
      name            => $alb_name,
      subnets         => $subnets,
      security_groups => [$alb_sg]
    );

    $config->{alb}->{arn} = $alb->{LoadBalancers}->[0]->{LoadBalancerArn};

    $self->set_alb($alb);
  }

  return;
}

########################################################################
sub create_alb_security_group {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  # create security groups
  my $ec2 = $self->get_ec2;

  my $sg_name = sprintf '%s-alb-sg', $config->{app}->{name};
  $self->inc_required_resources( security_groups => [$sg_name] );

  $self->log_info( 'http-service: ALB security group [%s] will be created...%s', $sg_name, $dryrun );

  my $sg_description = sprintf 'allow in-bound 443 & 80 to %s-alb', $config->{app}->{name};

  return
    if $dryrun;

  my $sg = $ec2->create_security_group( $sg_name, $sg_description );

  $config->{security_groups}->{alb}->{group_id} = $sg->{GroupId};

  foreach my $port (qw(80 443)) {
    $ec2->authorize_security_group_ingress(
      group_id => $sg->{GroupId},
      port     => $port,
      cidr     => '0.0.0.0/0',
    );
  }

  return $sg->{GroupId};
}

########################################################################
sub create_alias {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $domain = $config->{domain};

  my $zone_id = $config->{route53}->{zone_id};

  return
    if !$domain;

  my $dryrun = $self->get_dryrun;

  my $route53 = $self->get_route53;

  return
    if $dryrun;

  my $alb_arn = $config->{alb}->{arn};

  my $elb = $self->get_elb;

  my $alb = $elb->describe_load_balancer( $alb_arn, 'LoadBalancers[0]' );

  my ( $alb_dns_name, $alb_zone_id ) = @{$alb}{qw(DNSName CanonicalHostedZoneId)};

  my $result = $route53->find_alias_record(
    zone_id     => $zone_id,
    dns_name    => $alb_dns_name,
    domain_name => $domain
  );

  if ( $result && @{$result} ) {
    $self->log_info( 'http-service: alias record for [%s] exists...skipping', $domain );
    return;
  }

  $self->log_warn( 'route53: alias for [%s] will be created...%s', $domain, $dryrun );

  return
    if $dryrun;

  log_die( $self, "ERROR: could not determine if an alias record exist for [%s]\n%s",
    $domain, $route53->get_error )
    if !$result;

  $result = $route53->create_alias(
    domain       => $domain,
    zone_id      => $zone_id,
    alb_dns_name => $alb_dns_name,
    alb_zone_id  => $alb_zone_id,
  );

  log_die( $self, "ERROR: could not create alias record for [%s]\n%s", $domain, $route53->get_error )
    if !$result;

  $self->log_warn( 'http-service: successfully create alias record for [%s]', $domain );

  return;
}

1;
