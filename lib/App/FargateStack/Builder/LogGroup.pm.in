package App::FargateStack::Builder::LogGroup;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);

use App::FargateStack::Constants;

use Role::Tiny;

########################################################################
sub build_log_groups {
########################################################################
  my ($self) = @_;

  my ( $config, $tasks, $dryrun ) = $self->common_args(qw(config tasks dryrun));

  my $log_groups = $self->get_log_groups;

  my $logs = $self->fetch_logs;

  foreach my $group ( keys %{ $log_groups // {} } ) {
    my $task_name = $log_groups->{$group};

    my $task = $tasks->{$task_name};

    my $log_group = $self->get_cache && $task->{log_group}->{arn} ? {} : $logs->log_group_exists($group);

    my $arn
      = $self->get_cache && $task->{log_group}->{arn} ? $task->{log_group}->{arn} : $log_group->{logGroupArn};

    if ($arn) {
      $self->log_info( 'logs: [%s] exists...%s', $group, $self->get_cache || 'skipping' );
      my $log_group_name = ( split /:/xsm, $arn )[-1];

      # update config - make sure name is set!
      $task->{log_group}->{name} //= $log_group->{logGroupName} // $log_group_name;
      $task->{log_group}->{arn}  //= $log_group->{logGroupArn};

      $self->inc_existing_resources( log_group => $task->{log_group}->{arn} );
      next;
    }

    $self->log_warn( 'logs: [%s] will be created...%s', $group, $dryrun );

    $self->inc_required_resources(
      log_group => sub {
        my ($dryrun) = @_;
        return $dryrun ? "arn:???$group" : $task->{log_group}->{arn};
      }
    );

    next
      if $dryrun;

    $self->log_warn( 'logs: creating [%s]...', $group );

    my $result = $logs->create_log_group($group);

    log_die( $self, "ERROR: could not create group: [%s]\n%s", $group, $logs->get_error )
      if !$result;

    $task->{log_group}->{arn}  = $result->{logGroupArn};
    $task->{log_group}->{name} = ( split /:/xsm, $result->{logGroupArn} )[-1];

    my $retention_days = $task->{log_group}->{retention_days} //= $DEFAULT_LOG_RETENTION_DAYS;
    $task->{log_group}->{retention_days} = $retention_days;

    $self->log_warn( 'logs: setting log retention days to [%s] for [%s]', $retention_days, $group );
    $logs->put_retention_policy( $group, $retention_days );
  }

  return $TRUE;
}

########################################################################
sub fetch_logs {
########################################################################
  my ($self) = @_;

  require App::Logs;

  my $logs = $self->get_logs;

  return $logs
    if $logs;

  $logs = App::Logs->new( $self->get_global_options );

  $self->set_logs($logs);

  return $logs;
}

########################################################################
sub add_log_group_policy {
########################################################################
  my ($self) = @_;

  my @log_group_arns;

  my $logs = $self->fetch_logs;

  foreach my $group_name ( keys %{ $self->get_log_groups } ) {
    my $log_group = $logs->log_group_exists($group_name);
    next if !$log_group;  # TBD: croak unless $dryrun mode?

    push @log_group_arns, $log_group->{logGroupArn}, $log_group->{logGroupArn} . ':log-stream:*';
  }

  return {
    Effect   => 'Allow',
    Action   => [qw(logs:CreateLogStream logs:PutLogEvents logs:CreateLogGroup)],
    Resource => \@log_group_arns,
  };
}

########################################################################
sub update_log_groups {
########################################################################
  my ( $self, $log_group, $task_name ) = @_;

  my $log_groups = $self->get_log_groups // {};

  $log_groups->{$log_group} = $task_name;

  $self->set_log_groups($log_groups);

  return;
}

1;
