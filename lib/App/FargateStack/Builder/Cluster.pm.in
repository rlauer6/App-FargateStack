package App::FargateStack::Builder::Cluster;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);

use App::FargateStack::Constants;

use Role::Tiny;

########################################################################
sub build_fargate_cluster {
########################################################################
  my ($self) = @_;

  my $config = $self->get_config;

  my $dryrun = $self->get_dryrun;

  my $ecs = $self->get_ecs;

  my $cluster_name = $config->{cluster}->{name};

  if ( !$cluster_name ) {
    $cluster_name = $config->{app}->{name} . '-cluster';
    $config->{cluster}->{name} = $cluster_name;
  }

  ## - cluster exists? -

  my $cluster_arn = $config->{cluster}->{arn};

  if ( !$cluster_arn || !$self->get_cache ) {
    # - validate cluster arn
    $cluster_arn = $ecs->cluster_exists($cluster_name);
  }

  if ($cluster_arn) {
    $self->log_info( sprintf 'cluster: [%s] exists...%s', $cluster_name, $self->get_cache );

    $self->inc_existing_resources( cluster => [$cluster_arn] );
    $config->{cluster}->{arn} = $cluster_arn;

    return;
  }

  ## - create cluster -
  $self->log_warn( sprintf 'cluster: [%s] will be created...%s', $cluster_name, $dryrun );

  $self->inc_required_resources(
    cluster => sub {
      my ($dryrun) = @_;
      return $dryrun ? "arn:???/$cluster_name" : $config->{cluster}->{arn};
    }
  );

  return
    if $dryrun;

  my $cluster = $ecs->create_cluster($cluster_name);

  log_die( $self, "ERROR: could not create cluster [%s]\n%s", $cluster_name, $ecs->get_error )
    if !$cluster || $ecs->get_error;

  $self->log_warn( sprintf 'cluster: [%s] created...', $cluster_name );

  $config->{cluster}->{arn} = $cluster->{cluster}->{clusterArn};

  return $TRUE;
}

########################################################################
sub add_ecr_policy {
########################################################################
  my ($self) = @_;

  my $tasks = $self->get_config->{tasks};

  my @repos = map { $tasks->{$_}->{image} =~ /^([^:]+):?.*?$/xsm } keys %{$tasks};

  for (@repos) {
    $_ = sprintf $ECR_ARN_TEMPLATE, $self->get_region, $self->get_account, $_;
  }

  return (
    { Effect   => 'Allow',
      Action   => ['ecr:GetAuthorizationToken'],
      Resource => q{*}
    },
    { Effect   => 'Allow',
      Action   => [qw(ecr:BatchGetImage ecr:GetDownloadUrlForLayer)],
      Resource => \@repos,
    }
  );
}

1;
