package App::Logs;

# ECS logging utilities for CloudWatch

use strict;
use warnings;

use Carp;
use Data::Dumper;

use Role::Tiny::With;
with 'App::AWS';

use JSON;
use File::Temp qw(tempfile);
use App::Command;

use parent 'App::Command';

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(log_group_name region profile));

########################################################################
sub describe_log_groups {
########################################################################
  my ( $self, $log_group_name, $query ) = @_;

  $log_group_name //= $self->get_log_group_name;

  return $self->command(
    'describe-log-groups' => [
      $log_group_name ? ( '--log-group-name-prefix' => $log_group_name ) : (),
      $query          ? ( '--query'                 => $query )          : ()
    ]
  );
}

########################################################################
sub log_group_exists {
########################################################################
  my ( $self, $log_group_name ) = @_;

  $log_group_name //= $self->get_log_group_name;

  # Check if log group exists already
  my $result = $self->describe_log_groups( $log_group_name, 'logGroups' );

  return
    if !$result || !@{$result};

  return $result->[0];
}

sub put_retention_policy {
  my ( $self, $log_group_name, $retention_period ) = @_;

  my @valid_periods = ( 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 );

  croak "invalid retention period ($retention_period)\n"
    if !any { $_ eq $retention_period } @valid_periods;

  return $self->command(
    'put-retention-period' => [
      '--log-group-name'     => $log_group_name,
      'retention-period-day' => $retention_period,
    ]
  );

}

########################################################################
sub create_log_group {
########################################################################
  my ( $self, $log_group_name ) = @_;

  $log_group_name //= $self->get_log_group_name;

  my $log_group = $self->log_group_exists($log_group_name);

  return $log_group
    if $log_group;

  $self->command( 'create-log-group' => [ '--log-group-name' => $log_group_name, ] );

  croak sprintf "could not create log group %s\n%s", $log_group_name, $self->get_error
    if $self->get_error;

  return $self->log_group_exists($log_group_name);
}

########################################################################
sub get_log_event {
########################################################################
  my ( $self, $log_group, $log_stream, $query ) = @_;

  return $self->command(
    'get-log-events' => [
      '--log-group-name' => $log_group,
      '--log-stream'     => $log_stream,
      $query ? ( '--query' => $query ) : ()
    ]
  );
}

1;
