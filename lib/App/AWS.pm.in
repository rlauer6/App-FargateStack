package App::AWS;

use strict;
use warnings;

use Data::Dumper;
use English qw(-no_match_vars);
use List::Util qw(none);

use JSON;

use Role::Tiny;

########################################################################
sub profile {
########################################################################
  my ($self) = @_;

  return $self->get_profile // $ENV{AWS_PROFILE};
}

########################################################################
sub region {
########################################################################
  my ($self) = @_;

  return $self->get_region // 'us-east-1';
}

########################################################################
sub command {
########################################################################
  my ( $self, $command, $extra ) = @_;

  my ( undef, $service ) = split /::/xsm, lc ref $self;

  my @cmd = ( 'aws', $service, $command );

  my @args = (
    '--profile' => $self->profile,
    '--region'  => $self->region,
    @{ $extra || [] },
  );

  my $result = $self->execute( @cmd, @args );

  return
    if !$result;

  chomp $result;

  my $obj = eval { return decode_json($result); };

  if ( !$obj && none { '--output' eq $_ } @args ) {
    # note that errors may occur when $result is just text, that's ok
    $self->get_logger->error($EVAL_ERROR);
    $self->get_logger->error( join q{ }, @cmd, @args );
  }

  return $obj ? $obj : $result;
}

1;
